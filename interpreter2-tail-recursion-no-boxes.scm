#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

<<<<<<< HEAD
   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).
=======
;(load "simpleParser.scm")
(load "functionParser.scm")

; An interpreter for the simple language using tail recursion for the M_state functions and does not handle side effects.

; The functions that start interpret-...  all return the current environment.  These are the M_state functions.
; The functions that start eval-...  all return a value.  These are the M_value and M_boolean functions.

; The main function.  Calls parser to get the parse tree and interprets it with a new environment.  Sets default continuations for return, break, continue, throw, and "next statement"
(define interpret
  (lambda (file)
    (scheme->language
     (interpret-statement-list '((funccall main)) (outer-interpret file) (lambda (v) v) (lambda (v) v)
                               (lambda (env) (myerror "Break used outside of loop")) (lambda (env) (myerror "Continue used outside of loop"))
                               (lambda (v env) (myerror "Uncaught exception thrown")) (lambda (env) env)))))

(define outer-interpret
  (lambda (file)
    (scheme->language
     (interpret-outer-state-list (parser file) (newenvironment) (lambda (v) v)
                                 (lambda (v env) (myerror "Inproper Use of Throw"))
                                 (lambda (env) env))))) 

(define interpret-outer-state-list
  (lambda (statement-list environment return throw next)
    (if (null? statement-list)
        (return environment)
        (interpret-outer-state (first-statement statement-list) environment (lambda (v) v) throw (lambda (env) (interpret-outer-state-list (next-statement statement-list) env return throw next))))))

(define first-statement car)
(define next-statement cdr)
 
 
; interprets a list of statements.  The state/environment from each statement is used for the next ones.
(define interpret-statement-list
  (lambda (statement-list environment return function-return break continue throw next)
    (if (null? statement-list)
        (next environment)
        (interpret-statement (first-statement statement-list) environment return function-return break continue throw (lambda (env) (interpret-statement-list (next-statement statement-list) env return function-return break continue throw next))))))

;Handles all outer state/global assignments and functions
(define interpret-outer-state
  (lambda (statement environment return throw next)
    (cond
      ((eq? 'var (statement-type statement)) (interpret-declare statement environment next return throw))
      ((eq? '= (statement-type statement)) (interpret-assign statement environment next))
      ((eq? 'function (statement-type statement)) (interpret-function-def statement environment next))
      (else (myerror "Unexpected Statement outside of functions")))))

; interpret a statement in the environment with continuations for return, break, continue, throw, and "next statement"
(define interpret-statement
  (lambda (statement environment return function-return break continue throw next)
    (cond
      ((eq? 'return (statement-type statement)) (interpret-return statement environment function-return throw))
      ((eq? 'var (statement-type statement)) (interpret-declare statement environment next return throw))
      ((eq? '= (statement-type statement)) (interpret-assign statement environment next throw))
      ((eq? 'if (statement-type statement)) (interpret-if statement environment return function-return break continue throw next))
      ((eq? 'while (statement-type statement)) (interpret-while statement environment return function-return throw next))
      ((eq? 'continue (statement-type statement)) (continue environment))
      ((eq? 'break (statement-type statement)) (break environment))
      ((eq? 'begin (statement-type statement)) (interpret-block statement environment return function-return break continue throw next))
      ((eq? 'throw (statement-type statement)) (interpret-throw statement environment throw))
      ((eq? 'try (statement-type statement)) (interpret-try statement environment return function-return break continue throw next))
      ((eq? 'function (statement-type statement)) (interpret-func-def statement environment return next))
      ((eq? 'funccall (statement-type statement)) (interpret-func-call statement environment return break continue throw next))
      (else (myerror "Unknown statement:" (statement-type statement))))))


;Creating within the environment a binding of (function-name function-closure)
(define interpret-function-def
  (lambda (statement environment return)
    (return (create-binding (get-function-name statement) (create-closure statement environment) environment))))

(define get-function-name cadr)

(define create-binding
  (lambda (key val environment)
    (cond
      ((exists? key (list (topframe environment))) (cons (update-binding-layer key value (topframe environment)) (popframe environment)))
      (else (insert key val environment)))))

(define create-closure
  (lambda (statement environment)
    (list (parameters statement) (code statement) (function-environment))))

(define parameters caddr)
(define code cadddr)

(define function-environment
  (lambda ()
    ((lambda (f)
       (f f))
     (lambda (a)
       (lambda (formal-params actual-params environment)
         (if (null? formal-params) environment
             ((a a) (next-parameters formal-params) (next-parameters actual-params) (insert (first-parameter formal-params) (first-parameter actual-params) environment))))))))

(define first-parameter car)
(define next-parameters cdr)
       

(define update-binding-layer
  (lambda (key val environment) key))

;Mstate for calling functions
;Ya idk
(define interpret-func-call
  (lambda (statement environment return break continue throw next)
    (begin
      (get-closure (function-name statement) environment (lambda (v) (interpret-function-with-return
       (get-function-body v) ((get-func-environment v) (get-function-params v) (get-actual-params statement) environment) return break continue throw next))))));statement, environment, return, break, continue, throw,next

(define function-name cadr)
(define get-func-environment caddr)
(define get-function-params car)
(define get-function-body cadr)
(define get-actual-params
  (lambda (statement)
    (if (null? (cddr statement))
        '()
        (caddr statement))))

(define get-formal-params cadddr)

(define get-closure
  (lambda (func-name environment return)
    (cond
      ((exists? func-name (list (topframe environment))) (return (get-binding func-name environment)))
      (else (myerror "Not within scope")))))

(define get-binding
  (lambda (func-name environment)
    (lookup-variable func-name environment)))
          
(define get-function-environment
  (lambda (statement environment)
    ((caddr (get-closure (function-name statement) environment)) environment)))           
    
;Creates immediate return continuation for returning in order to exit function
(define interpret-function-with-return
  (lambda (statement environment return break continue throw next)
    (call/cc
     (lambda (funcReturn)
       (interpret-statement-list statement environment return funcReturn break continue throw next)))))

;Mvalue for function calling
(define eval-func-call
  (lambda (statement environment return throw)
    (letrec ((function-closure (get-closure (cadr statement) environment)))
    (cond
      ((eq? function-closure 'error) (myError "Undefined Function"))
      (else (return (get-binding 'return (interpret-function-with-return
       (get-function-body (get-closure (function-name statement) environment))
       (bind-parameters (get-actual-params statement)
                        (get-formal-params statement)
                        (get-function-environment statement environment)
                        environment return throw next)))))))))

; Calls the return continuation with the given expression value
(define interpret-return
  (lambda (statement environment return throw)
    (return (eval-expression (get-expr statement) environment return throw))))

; Adds a new variable binding to the environment.  There may be an assignment with the variable
(define interpret-declare
  (lambda (statement environment next return throw)
    (if (exists-declare-value? statement)
        (next (insert (get-declare-var statement) (eval-expression (get-declare-value statement) environment return throw) environment))
        (next (insert (get-declare-var statement) 'novalue environment)))))

; Updates the environment to add a new binding for a variable
(define interpret-assign
  (lambda (statement environment next throw)
    (next (update (get-assign-lhs statement) (eval-expression (get-assign-rhs statement) environment throw) environment))))

; We need to check if there is an else condition.  Otherwise, we evaluate the expression and do the right thing.
(define interpret-if
  (lambda (statement environment return function-return break continue throw next)
    (cond
      ((eval-expression (get-condition statement) environment) (interpret-statement (get-then statement) environment return function-return break continue throw next))
      ((exists-else? statement) (interpret-statement (get-else statement) environment return function-return break continue throw next))
      (else (next environment)))))

; Interprets a while loop.  We must create break and continue continuations for this loop
(define interpret-while
  (lambda (statement environment return function-return throw next)
    (letrec ((loop (lambda (condition body environment)
                     (if (eval-expression condition environment)
                         (interpret-statement body environment return function-return (lambda (env) (next env)) (lambda (env) (loop condition body env)) throw (lambda (env) (loop condition body env)))
                         (next environment)))))
      (loop (get-condition statement) (get-body statement) environment))))

; Interprets a block.  The break, continue, throw and "next statement" continuations must be adjusted to pop the environment
(define interpret-block
  (lambda (statement environment return function-return break continue throw next)
    (interpret-statement-list (cdr statement)
                                         (push-frame environment)
                                         return
                                         function-return
                                         (lambda (env) (break (pop-frame env)))
                                         (lambda (env) (continue (pop-frame env)))
                                         (lambda (v env) (throw v (pop-frame env)))
                                         (lambda (env) (next (pop-frame env))))))

; We use a continuation to throw the proper value.  Because we are not using boxes, the environment/state must be thrown as well so any environment changes will be kept
(define interpret-throw
  (lambda (statement environment throw)
    (throw (eval-expression (get-expr statement) environment) environment)))

; Interpret a try-catch-finally block

; Create a continuation for the throw.  If there is no catch, it has to interpret the finally block, and once that completes throw the exception.
;   Otherwise, it interprets the catch block with the exception bound to the thrown value and interprets the finally block when the catch is done
(define create-throw-catch-continuation
  (lambda (catch-statement environment return break continue throw next finally-block)
    (cond
      ((null? catch-statement) (lambda (ex env) (interpret-block finally-block env return break continue throw (lambda (env2) (throw ex env2))))) 
      ((not (eq? 'catch (statement-type catch-statement))) (myerror "Incorrect catch statement"))
      (else (lambda (ex env)
                  (interpret-statement-list 
                       (get-body catch-statement) 
                       (insert (catch-var catch-statement) ex (push-frame env))
                       return 
                       (lambda (env2) (break (pop-frame env2))) 
                       (lambda (env2) (continue (pop-frame env2))) 
                       (lambda (v env2) (throw v (pop-frame env2))) 
                       (lambda (env2) (interpret-block finally-block (pop-frame env2) return break continue throw next))))))))

; To interpret a try block, we must adjust  the return, break, continue continuations to interpret the finally block if any of them are used.
;  We must create a new throw continuation and then interpret the try block with the new continuations followed by the finally block with the old continuations
(define interpret-try
  (lambda (statement environment return function-return break continue throw next)
    (let* ((finally-block (make-finally-block (get-finally statement)))
           (try-block (make-try-block (get-try statement)))
           (new-return (lambda (v) (interpret-block finally-block environment return break continue throw (lambda (env2) (return v)))))
           (new-break (lambda (env) (interpret-block finally-block env return break continue throw (lambda (env2) (break env2)))))
           (new-continue (lambda (env) (interpret-block finally-block env return break continue throw (lambda (env2) (continue env2)))))
           (new-throw (create-throw-catch-continuation (get-catch statement) environment return break continue throw next finally-block)))
      (interpret-block try-block environment new-return new-break new-continue new-throw (lambda (env) (interpret-block finally-block env return break continue throw next))))))

; helper methods so that I can reuse the interpret-block method on the try and finally blocks
(define make-try-block
  (lambda (try-statement)
    (cons 'begin try-statement)))

(define make-finally-block
  (lambda (finally-statement)
    (cond
      ((null? finally-statement) '(begin))
      ((not (eq? (statement-type finally-statement) 'finally)) (myerror "Incorrectly formatted finally block"))
      (else (cons 'begin (cadr finally-statement))))))

; Evaluates all possible boolean and arithmetic expressions, including constants and variables.
(define eval-expression
  (lambda (expr environment return throw)
    (cond
      ((number? expr) (return expr))
      ((eq? expr 'true) (return #t))
      ((eq? expr 'false) (return #f))
      ((eq? expr 'funccall) (eval-func-call expr environment return throw))
      ((not (list? expr)) (lookup expr environment))
      (else (eval-operator expr environment return throw)))))

; Evaluate a binary (or unary) operator.  Although this is not dealing with side effects, I have the routine evaluate the left operand first and then
; pass the result to eval-binary-op2 to evaluate the right operand.  This forces the operands to be evaluated in the proper order in case you choose
; to add side effects to the interpreter
(define eval-operator
  (lambda (expr environment return throw)
    (cond
      ((eq? '! (operator expr)) (not (eval-expression (operand1 expr) environment return throw)))
      ((and (eq? '- (operator expr)) (= 2 (length expr))) (- (eval-expression (operand1 expr) environment return throw)))
      (else (eval-binary-op2 expr (eval-expression (operand1 expr) environment return throw) environment return throw)))))

; Complete the evaluation of the binary operator by evaluating the second operand and performing the operation.
(define eval-binary-op2
  (lambda (expr op1value environment return throw)
    (cond
      ((eq? '+ (operator expr)) (+ op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '- (operator expr)) (- op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '* (operator expr)) (* op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '/ (operator expr)) (quotient op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '% (operator expr)) (remainder op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '== (operator expr)) (isequal op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '!= (operator expr)) (not (isequal op1value (eval-expression (operand2 expr) environment return throw))))
      ((eq? '< (operator expr)) (< op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '> (operator expr)) (> op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '<= (operator expr)) (<= op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '>= (operator expr)) (>= op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '|| (operator expr)) (or op1value (eval-expression (operand2 expr) environment return throw)))
      ((eq? '&& (operator expr)) (and op1value (eval-expression (operand2 expr) environment return throw)))
      (else (myerror "Unknown operator:" (operator expr))))))

; Determines if two values are equal.  We need a special test because there are both boolean and integer types.
(define isequal
  (lambda (val1 val2)
    (if (and (number? val1) (number? val2))
        (= val1 val2)
        (eq? val1 val2))))


;-----------------
; HELPER FUNCTIONS
;-----------------

; These helper functions define the operator and operands of a value expression
(define operator car)
(define operand1 cadr)
(define operand2 caddr)
(define operand3 cadddr)

(define exists-operand2?
  (lambda (statement)
    (not (null? (cddr statement)))))

(define exists-operand3?
  (lambda (statement)
    (not (null? (cdddr statement)))))

; these helper functions define the parts of the various statement types
(define statement-type operator)
(define get-expr operand1)
(define get-declare-var operand1)
(define get-declare-value operand2)
(define exists-declare-value? exists-operand2?)
(define get-assign-lhs operand1)
(define get-assign-rhs operand2)
(define get-condition operand1)
(define get-then operand2)
(define get-else operand3)
(define get-body operand2)
(define exists-else? exists-operand3?)
(define get-try operand1)
(define get-catch operand2)
(define get-finally operand3)

(define catch-var
  (lambda (catch-statement)
    (car (operand1 catch-statement))))


;------------------------
; Environment/State Functions
;------------------------

; create a new empty environment
(define newenvironment
  (lambda ()
    (list (newframe))))

; create an empty frame: a frame is two lists, the first are the variables and the second is the "store" of values
(define newframe
  (lambda ()
    '(() ())))

; add a frame onto the top of the environment
(define push-frame
  (lambda (environment)
    (cons (newframe) environment)))

; remove a frame from the environment
(define pop-frame
  (lambda (environment)
    (cdr environment)))

; some abstractions
(define topframe car)
(define remainingframes cdr)

; does a variable exist in the environment?
(define exists?
  (lambda (var environment)
    (cond
      ((null? environment) #f)
      ((exists-in-list? var (variables (topframe environment))) #t)
      (else (exists? var (remainingframes environment))))))

; does a variable exist in a list?
(define exists-in-list?
  (lambda (var l)
    (cond
      ((null? l) #f)
      ((eq? var (car l)) #t)
      (else (exists-in-list? var (cdr l))))))

; Looks up a value in the environment.  If the value is a boolean, it converts our languages boolean type to a Scheme boolean type
(define lookup
  (lambda (var environment)
    (lookup-variable var environment)))
  
; A helper function that does the lookup.  Returns an error if the variable does not have a legal value
(define lookup-variable
  (lambda (var environment)
    (let ((value (lookup-in-env var environment)))
      (if (eq? 'novalue value)
          (myerror "error: variable without an assigned value:" var)
          value))))

; Return the value bound to a variable in the environment
(define lookup-in-env
  (lambda (var environment)
    (cond
      ((null? environment) (myerror "error: undefined variable" var))
      ((exists-in-list? var (variables (topframe environment))) (lookup-in-frame var (topframe environment)))
      (else (lookup-in-env var (cdr environment))))))

; Return the value bound to a variable in the frame
(define lookup-in-frame
  (lambda (var frame)
    (cond
      ((not (exists-in-list? var (variables frame))) (myerror "error: undefined variable" var))
      (else (language->scheme (get-value (indexof var (variables frame)) (store frame)))))))

; Get the location of a name in a list of names
(define indexof
  (lambda (var l)
    (cond
      ((null? l) 0)  ; should not happen
      ((eq? var (car l)) 0)
      (else (+ 1 (indexof var (cdr l)))))))

; Get the value stored at a given index in the list
(define get-value
  (lambda (n l)
    (cond
      ((zero? n) (unbox (car l)))
      (else (get-value (- n 1) (cdr l))))))

; Adds a new variable/value binding pair into the environment.  Gives an error if the variable already exists in this frame.
(define insert
  (lambda (var val environment)
    (if (exists-in-list? var (variables (car environment)))  
        (myerror "error: variable is being re-declared:" var)
        (cons (add-to-frame var val (car environment)) (cdr environment)))))

; Changes the binding of a variable to a new value in the environment.  Gives an error if the variable does not exist.
(define update
  (lambda (var val environment)
    (if (exists? var environment)
        (update-existing var val environment)
        (myerror "error: variable used but not defined:" var))))

; Add a new variable/value pair to the frame.
(define add-to-frame
  (lambda (var val frame)
    (list (cons var (variables frame)) (cons (scheme->language (box val)) (store frame)))))
;(list (cons var (variables frame)) (cons (scheme->language val) (store frame)))))

; Changes the binding of a variable in the environment to a new value
(define update-existing
  (lambda (var val environment)
    (if (exists-in-list? var (variables (car environment)))
        (cons (update-in-frame var val (topframe environment)) (remainingframes environment))
        (cons (topframe environment) (update-existing var val (remainingframes environment))))))

; Changes the binding of a variable in the frame to a new value.
(define update-in-frame
  (lambda (var val frame)
    (list (variables frame) (update-in-frame-store var val (variables frame) (store frame)))))

; Changes a variable binding by placing the new value in the appropriate place in the store
(define update-in-frame-store
  (lambda (var val varlist vallist)
    (cond
      ((eq? var (car varlist)) (set-box! (car vallist) val)) ;(cons (scheme->language val) (cdr vallist)))
      (else (cons (car vallist) (update-in-frame-store var val (cdr varlist) (cdr vallist)))))))

; Returns the list of variables from a frame
(define variables
  (lambda (frame)
    (car frame)))

; Returns the store from a frame
(define store
  (lambda (frame)
    (cadr frame)))


; Functions to convert the Scheme #t and #f to our languages true and false, and back.

(define language->scheme
  (lambda (v) 
    (cond 
      ((eq? v 'false) #f)
      ((eq? v 'true) #t)
      (else v))))

(define scheme->language
  (lambda (v)
    (cond
      ((eq? v #f) 'false)
      ((eq? v #t) 'true)
      (else v))))

; Because the error function is not defined in R5RS scheme, I create my own:
(define error-break (lambda (v) v))
(call-with-current-continuation (lambda (k) (set! error-break k)))

(define myerror
  (lambda (str . vals)
    (letrec ((makestr (lambda (str vals)
                        (if (null? vals)
                            str
                            (makestr (string-append str (string-append " " (symbol->string (car vals)))) (cdr vals))))))
      (error-break (display (string-append str (makestr "" vals)))))))
>>>>>>> fc2fd1d78c682484571670d01ab7d358acdc6dba

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 4348 0 17 3 42 #";Jason Harnack, Vicki Kelly, Tom Pescatore"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";NOTE: UTILIZING ALL COMMENTS AND CODE FROM GIVEN INTERPRETER SOLUTI"
 #"ON IN CLASS"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(load \"simpleParser.scm\")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"functionParser.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 121
(
 #"; An interpreter for the simple language using tail recursion for th"
 #"e M_state functions and does not handle side effects."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #"; The functions that start interpret-...  all return the current env"
 #"ironment.  These are the M_state functions."
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #"; The functions that start eval-...  all return a value.  These are "
 #"the M_value and M_boolean functions."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #"; The main function.  Calls parser to get the parse tree and interpr"
 #"ets it with a new environment.  Sets default continuations for retur"
 #"n, break, continue, throw, and \"next statement\""
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"interpret"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"file"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"scheme->language"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 24 #"interpret-statement-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 7 #"funcall"
0 0 24 3 1 #" "
0 0 14 3 4 #"main"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"outer-interpret"
0 0 24 3 1 #" "
0 0 14 3 4 #"file"
0 0 24 3 3 #") ("
0 0 14 3 14 #"newenvironment"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Break used outside of loop\""
0 0 24 3 4 #")) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Continue used outside of loop\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Uncaught exception thrown\""
0 0 24 3 4 #")) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"outer-interpret"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"file"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"scheme->language"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 26 #"interpret-outer-state-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 24 3 1 #" "
0 0 14 3 4 #"file"
0 0 24 3 3 #") ("
0 0 14 3 14 #"newenvironment"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"Inproper Use of Throw\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"interpret-outer-state-list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 21 #"interpret-outer-state"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-list"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 26 #"interpret-outer-state-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #"; interprets a list of statements.  The state/environment from each "
 #"statement is used for the next ones."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"interpret-statement-list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-list"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 24 #"interpret-statement-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";Handles all outer state/global assignments and functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"interpret-outer-state"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 17 #"interpret-declare"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"interpret-assign"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"function"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 22 #"interpret-function-def"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"Unexpected Statement outside of functions\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #"; interpret a statement in the environment with continuations for re"
 #"turn, break, continue, throw, and \"next statement\""
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"interpret-statement"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"interpret-return"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 17 #"interpret-declare"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"interpret-assign"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"interpret-if"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"while"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"interpret-while"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"interpret-throw"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"try"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"interpret-try"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"function"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"interpret-func-def"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"interpret-func-call"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Unknown statement:\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";Creating within the environment a binding of (function-name functio"
 #"n-closure)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"interpret-function-def"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 14 #"create-binding"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-function-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 14 #"create-closure"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"get-function-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"create-binding"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 7 #"exists?"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 20 #"update-binding-layer"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"popframe"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"create-closure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 20 #"function-environment"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"function-environment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"formal-params"
0 0 24 3 1 #" "
0 0 14 3 13 #"actual-params"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 13 #"formal-params"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"formal-params"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 13 #"actual-params"
0 0 24 3 3 #") ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"formal-params"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 13 #"actual-params"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"update-binding-layer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #") "
0 0 14 3 3 #"key"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Mstate for calling functions"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";Ya idk"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"interpret-func-call"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"get-closure"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 30 #"interpret-function-with-return"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 17 #"get-function-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                (("
0 0 14 3 20 #"get-func-environment"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 19 #"get-function-params"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 17 #"get-actual-params"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"get-func-environment"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"get-function-params"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"get-function-body"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"get-actual-params"
0 0 24 3 1 #" "
0 0 14 3 4 #"cddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"get-formal-params"
0 0 24 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"get-closure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"func-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 7 #"exists?"
0 0 24 3 1 #" "
0 0 14 3 9 #"func-name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-binding"
0 0 24 3 1 #" "
0 0 14 3 9 #"func-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"Not within scope\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"get-binding"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"func-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"lookup-variable"
0 0 24 3 1 #" "
0 0 14 3 9 #"func-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"get-function-environment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-closure"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")) "
0 0 14 3 11 #"environment"
0 0 24 3 14 #")))           "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";Creates immediate return continuation for returning in order to exi"
 #"t function"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 30 #"interpret-function-with-return"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"funcReturn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 24 #"interpret-statement-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 10 #"funcReturn"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";Mvalue for function calling"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"eval-func-call"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 16 #"function-closure"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-closure"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 30 #"interpret-function-with-return"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                         ("
0 0 14 3 17 #"get-function-body"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                         (("
0 0 14 3 20 #"get-func-environment"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 19 #"get-function-params"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 17 #"get-actual-params"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                         "
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Break used outside of loop\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Continue used outside of loop\""
0 0 24 3 3 #")) "
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 24 #"interpret-statement-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 16 #"function-closure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 10 #"push-frame"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 16 #"function-closure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; Calls the return continuation with the given expression value"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"interpret-return"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"return"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; Adds a new variable binding to the environment.  There may be an a"
 #"ssignment with the variable"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"interpret-declare"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 21 #"exists-declare-value?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-declare-var"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-declare-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-declare-var"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"novalue"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; Updates the environment to add a new binding for a variable"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"interpret-assign"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 6 #"update"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-assign-lhs"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-assign-rhs"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #"; We need to check if there is an else condition.  Otherwise, we eva"
 #"luate the expression and do the right thing."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"interpret-if"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-condition"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #") ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-then"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 12 #"exists-else?"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-else"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; Interprets a while loop.  We must create break and continue contin"
 #"uations for this loop"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"interpret-while"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 19 #"interpret-statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"loop"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"loop"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-condition"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #") ("
0 0 14 3 8 #"get-body"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 124
(
 #"; Interprets a block.  The break, continue, throw and \"next stateme"
 #"nt\" continuations must be adjusted to pop the environment"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"interpret-block"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 24 #"interpret-statement-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 10 #"push-frame"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 6 #"return"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 15 #"function-return"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 168
(
 #"; We use a continuation to throw the proper value.  Because we are n"
 #"ot using boxes, the environment/state must be thrown as well so any "
 #"environment changes will be kept"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"interpret-throw"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Interpret a try-catch-finally block"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 145
(
 #"; Create a continuation for the throw.  If there is no catch, it has"
 #" to interpret the finally block, and once that completes throw the e"
 #"xception."
) 0 0 24 29 1 #"\n"
0 0 17 3 145
(
 #";   Otherwise, it interprets the catch block with the exception boun"
 #"d to the thrown value and interprets the finally block when the catc"
 #"h is done"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"create-throw-catch-continuation"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 15 #"catch-statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"env2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 14 3 4 #"env2"
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 5 #"catch"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Incorrect catch statement\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 24 #"interpret-statement-list"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 8 #"get-body"
0 0 24 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 9 #"catch-var"
0 0 24 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 24 3 2 #") "
0 0 14 3 2 #"ex"
0 0 24 3 2 #" ("
0 0 14 3 10 #"push-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"env2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 4 #"env2"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"env2"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 4 #"env2"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"env2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 4 #"env2"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"env2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 24 3 1 #" "
0 0 14 3 4 #"env2"
0 0 24 3 2 #") "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 141
(
 #"; To interpret a try block, we must adjust  the return, break, conti"
 #"nue continuations to interpret the finally block if any of them are "
 #"used."
) 0 0 24 29 1 #"\n"
0 0 17 3 159
(
 #";  We must create a new throw continuation and then interpret the tr"
 #"y block with the new continuations followed by the finally block wit"
 #"h the old continuations"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"interpret-try"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 13 #"finally-block"
0 0 24 3 2 #" ("
0 0 14 3 18 #"make-finally-block"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-finally"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"try-block"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-try-block"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-try"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"new-return"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"env2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"new-break"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"env2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 4 #"env2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 12 #"new-continue"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"env2"
0 0 24 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 4 #"env2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"new-throw"
0 0 24 3 2 #" ("
0 0 14 3 31 #"create-throw-catch-continuation"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-catch"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 9 #"try-block"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-return"
0 0 24 3 1 #" "
0 0 14 3 15 #"function-return"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-break"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-continue"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-throw"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interpret-block"
0 0 24 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; helper methods so that I can reuse the interpret-block method on t"
 #"he try and finally blocks"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"make-try-block"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"try-statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 13 #"try-statement"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"make-finally-block"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 17 #"finally-statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 17 #"finally-statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 17 #"finally-statement"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"finally"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"Incorrectly formatted finally block\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 17 #"finally-statement"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; Evaluates all possible boolean and arithmetic expressions, includi"
 #"ng constants and variables."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 3 #") ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 24 3 3 #") ("
0 0 14 3 14 #"eval-func-call"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"eval-operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 149
(
 #"; Evaluate a binary (or unary) operator.  Although this is not deali"
 #"ng with side effects, I have the routine evaluate the left operand f"
 #"irst and then"
) 0 0 24 29 1 #"\n"
0 0 17 3 148
(
 #"; pass the result to eval-binary-op2 to evaluate the right operand. "
 #" This forces the operands to be evaluated in the proper order in cas"
 #"e you choose"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #"; to add side effects to the interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"eval-operator"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-binary-op2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #"; Complete the evaluation of the binary operator by evaluating the s"
 #"econd operand and performing the operation."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-binary-op2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"%"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"=="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"isequal"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"!="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"isequal"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"||"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 5 #"throw"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Unknown operator:\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #"; Determines if two values are equal.  We need a special test becaus"
 #"e there are both boolean and integer types."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"isequal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"val1"
0 0 24 3 1 #" "
0 0 14 3 4 #"val2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";-----------------"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; HELPER FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";-----------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; These helper functions define the operator and operands of a value"
 #" expression"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operator"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand3"
0 0 24 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"exists-operand2?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"exists-operand3?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; these helper functions define the parts of the various statement t"
 #"ypes"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"statement-type"
0 0 24 3 1 #" "
0 0 14 3 8 #"operator"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"get-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"get-declare-var"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"get-declare-value"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"exists-declare-value?"
0 0 24 3 1 #" "
0 0 14 3 16 #"exists-operand2?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"get-assign-lhs"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"get-assign-rhs"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"get-condition"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"get-then"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"get-else"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"get-body"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"exists-else?"
0 0 24 3 1 #" "
0 0 14 3 16 #"exists-operand3?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"get-try"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"get-catch"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"get-finally"
0 0 24 3 1 #" "
0 0 14 3 8 #"operand3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"catch-var"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 15 #"catch-statement"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 24 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Environment/State Functions"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";------------------------"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; create a new empty environment"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"newenvironment"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"newframe"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #"; create an empty frame: a frame is two lists, the first are the var"
 #"iables and the second is the \"store\" of values"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"newframe"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 9 #"(() ())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; add a frame onto the top of the environment"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"push-frame"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"newframe"
0 0 24 3 2 #") "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; remove a frame from the environment"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"pop-frame"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; some abstractions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"topframe"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"remainingframes"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; does a variable exist in the environment?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"exists?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 15 #"exists-in-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"exists?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 15 #"remainingframes"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; does a variable exist in a list?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"exists-in-list?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"exists-in-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 130
(
 #"; Looks up a value in the environment.  If the value is a boolean, i"
 #"t converts our languages boolean type to a Scheme boolean type"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"lookup"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"lookup-variable"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 103
(
 #"; A helper function that does the lookup.  Returns an error if the v"
 #"ariable does not have a legal value"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"lookup-variable"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"novalue"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"error: variable without an assigned value:\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 5 #"value"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Return the value bound to a variable in the environment"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"lookup-in-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"error: undefined variable\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 15 #"exists-in-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 5 #"))) ("
0 0 14 3 15 #"lookup-in-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; Return the value bound to a variable in the frame"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"lookup-in-frame"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 15 #"exists-in-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"error: undefined variable\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 16 #"language->scheme"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-value"
0 0 24 3 2 #" ("
0 0 14 3 7 #"indexof"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Get the location of a name in a list of names"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"indexof"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #")  "
0 0 17 3 19 #"; should not happen"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"indexof"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; Get the value stored at a given index in the list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"get-value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-value"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 124
(
 #"; Adds a new variable/value binding pair into the environment.  Give"
 #"s an error if the variable already exists in this frame."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"insert"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"exists-in-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"error: variable is being re-declared:\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-to-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #"; Changes the binding of a variable to a new value in the environmen"
 #"t.  Gives an error if the variable does not exist."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"exists?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 15 #"update-existing"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"myerror"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"error: variable used but not defined:\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Add a new variable/value pair to the frame."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"add-to-frame"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scheme->language"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Changes the binding of a variable in the environment to a new valu"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"update-existing"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"exists-in-list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"update-in-frame"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"remainingframes"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 3 #") ("
0 0 14 3 15 #"update-existing"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 15 #"remainingframes"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Changes the binding of a variable in the frame to a new value."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"update-in-frame"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #") ("
0 0 14 3 21 #"update-in-frame-store"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #") ("
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; Changes a variable binding by placing the new value in the appropr"
 #"iate place in the store"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"update-in-frame-store"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 24 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scheme->language"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 24 3 4 #"))) "
0 0 17 3 45 #";(cons (scheme->language val) (cdr vallist)))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 24 3 3 #") ("
0 0 14 3 21 #"update-in-frame-store"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Returns the list of variables from a frame"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"variables"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"frame"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Returns the store from a frame"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"frame"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"frame"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; Functions to convert the Scheme #t and #f to our languages true an"
 #"d false, and back."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"language->scheme"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"scheme->language"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Because the error function is not defined in R5RS scheme, I create"
 #" my own:"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"error-break"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 30 #"call-with-current-continuation"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"k"
0 0 24 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"error-break"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"myerror"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 7 #"makestr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 3 #"str"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 7 #"makestr"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 6 #")))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"error-break"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 7 #"makestr"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
